#include "0z_.h"

void setup() {                        // Инициализация модулей:
  // Хранение в энергонезависимой памяти названия сети и пароля
  // Пока не реализовано держим данные в оперативке
  db.WiFi_SSID = "SSID";              // Название Wi-fi сети
  db.WiFi_PASS = "password";          // Пароль Wi-fi сети
  // Адрес управляющего сервера
  db.URL_host = "your.site.com";      // Адрес сервера для запросов
  db.URL_get = "/sim/?get=";          // Путь к странице отдающей задачи микроконтроллеру
  db.URL_set = "/sim/?set=";          // Путь к странице сохраняющей ответы от микроконтроллера
  db.WC_emptyCalls = 0;
  db.simSignalStrength = 99;
  db.simBatteryVoltage = 9999;
  

  Serial.begin(115200);               // Последовательного порта, устанавливаем скорость 115200 бит/c (резервируются стандартные порты TX(GPIO 1), RX(GPIO 3) (2 пина))

  i_RTClock(D5, D4);                  // Часов реального времени ( I2C )

  i_DHT(D1);                          // Датчика влажности и температуры DHT22

  i_Nokia5110Display();               // Дисплея (резервируются порты -RST(подтянут к RST на ESP), -CE(необходим если несколько устроиств на линии), DC, Din, ClK (3-5 пинов))( SPI )
  getDHT(); getTime(); displayScreen();

  i_WiFi(db.WiFi_SSID, db.WiFi_PASS); // Подключение к Wi-fi сети

  i_Sim800(D2, D3);                   // SIM 800 L (TX, RX) При передаче команд на модуль светится светодиод на ESP, при приёме - на плате MCU
}

void loop() {

  SerialListen();                     // Чтение данных из монитора порта, если есть команды - выполнение команд настройки или диагностики модулей

  getDHT();                           // Обновление данных о температуре и влажности

  getTime();                          // Обновление данных о дате и времени

  scanSIMevent();                     // Проверка наличия событий на СИМ модуле функйция сама начнёт обработку событий при их наличии

  refreshSIMstatus(false);            // Обновим данные о модуле СИМ. false - по таймеру, true - принудительно

  displayScreen();                    // Обновление изображения на дисплее

  wcScanTasks(false);                 // Поиск заданий в сети. false - по таймеру, true - принудительно

  wcWetRequests();                    // Если есть неотправленные запросы - отправить их

  delay(300);                         // Дадим отдохнуть ESP примерно треть секунды
}
